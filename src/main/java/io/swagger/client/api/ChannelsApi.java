/**
 * IBM Blockchain Platform Service API
 * The Blockchain Service API allows you to interact with your blockchain network.  The APIs listed in this doc are authenticated using basic auth, where the username and password correspond to a user org and secret that are included in your service credentials.  See the ConnectionProfile schema under the Models for more information.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import ibp_java_client.ApiCallback;
import ibp_java_client.ApiClient;
import ibp_java_client.ApiException;
import ibp_java_client.ApiResponse;
import ibp_java_client.Configuration;
import ibp_java_client.Pair;
import ibp_java_client.ProgressRequestBody;
import ibp_java_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.InlineResponse4001;
import io.swagger.client.model.PeerList;
import io.swagger.client.model.BlockInformation;
import io.swagger.client.model.ChannelStats;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.CertificateList;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.StandardBody;
import io.swagger.client.model.InlineResponse500;
import io.swagger.client.model.InlineResponse2002;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelsApi {
    private ApiClient apiClient;

    public ChannelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getChannelBlock */
    private com.squareup.okhttp.Call getChannelBlockCall(String networkID, String channelID, String blockNo, PeerList body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'networkID' is set
        if (networkID == null) {
            throw new ApiException("Missing the required parameter 'networkID' when calling getChannelBlock(Async)");
        }
        
        // verify the required parameter 'channelID' is set
        if (channelID == null) {
            throw new ApiException("Missing the required parameter 'channelID' when calling getChannelBlock(Async)");
        }
        
        // verify the required parameter 'blockNo' is set
        if (blockNo == null) {
            throw new ApiException("Missing the required parameter 'blockNo' when calling getChannelBlock(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/networks/{networkID}/channels/{channelID}/blocks/{blockNo}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "networkID" + "\\}", apiClient.escapeString(networkID.toString()))
        .replaceAll("\\{" + "channelID" + "\\}", apiClient.escapeString(channelID.toString()))
        .replaceAll("\\{" + "blockNo" + "\\}", apiClient.escapeString(blockNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * See a block
     * Get the contents of given block
     * @param networkID ID of the IBP network (required)
     * @param channelID ID of the channel the block belongs to (required)
     * @param blockNo Number of the block you want the contents of. You derive the block number from the height of the channel. The first block is 0 and the last block is (channel_height - 1) (required)
     * @param body Lists your peers that should be queried (optional)
     * @return BlockInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BlockInformation getChannelBlock(String networkID, String channelID, String blockNo, PeerList body) throws ApiException {
        ApiResponse<BlockInformation> resp = getChannelBlockWithHttpInfo(networkID, channelID, blockNo, body);
        return resp.getData();
    }

    /**
     * See a block
     * Get the contents of given block
     * @param networkID ID of the IBP network (required)
     * @param channelID ID of the channel the block belongs to (required)
     * @param blockNo Number of the block you want the contents of. You derive the block number from the height of the channel. The first block is 0 and the last block is (channel_height - 1) (required)
     * @param body Lists your peers that should be queried (optional)
     * @return ApiResponse&lt;BlockInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BlockInformation> getChannelBlockWithHttpInfo(String networkID, String channelID, String blockNo, PeerList body) throws ApiException {
        com.squareup.okhttp.Call call = getChannelBlockCall(networkID, channelID, blockNo, body, null, null);
        Type localVarReturnType = new TypeToken<BlockInformation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * See a block (asynchronously)
     * Get the contents of given block
     * @param networkID ID of the IBP network (required)
     * @param channelID ID of the channel the block belongs to (required)
     * @param blockNo Number of the block you want the contents of. You derive the block number from the height of the channel. The first block is 0 and the last block is (channel_height - 1) (required)
     * @param body Lists your peers that should be queried (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelBlockAsync(String networkID, String channelID, String blockNo, PeerList body, final ApiCallback<BlockInformation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelBlockCall(networkID, channelID, blockNo, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BlockInformation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelMetrics */
    private com.squareup.okhttp.Call getChannelMetricsCall(String networkID, String channelID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'networkID' is set
        if (networkID == null) {
            throw new ApiException("Missing the required parameter 'networkID' when calling getChannelMetrics(Async)");
        }
        
        // verify the required parameter 'channelID' is set
        if (channelID == null) {
            throw new ApiException("Missing the required parameter 'channelID' when calling getChannelMetrics(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/networks/{networkID}/channels/{channelID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "networkID" + "\\}", apiClient.escapeString(networkID.toString()))
        .replaceAll("\\{" + "channelID" + "\\}", apiClient.escapeString(channelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * See basic channel stats
     * Get a report on various channel metrics
     * @param networkID ID of the IBP network (required)
     * @param channelID Gathered metrics will pertain to this channel (required)
     * @return ChannelStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelStats getChannelMetrics(String networkID, String channelID) throws ApiException {
        ApiResponse<ChannelStats> resp = getChannelMetricsWithHttpInfo(networkID, channelID);
        return resp.getData();
    }

    /**
     * See basic channel stats
     * Get a report on various channel metrics
     * @param networkID ID of the IBP network (required)
     * @param channelID Gathered metrics will pertain to this channel (required)
     * @return ApiResponse&lt;ChannelStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelStats> getChannelMetricsWithHttpInfo(String networkID, String channelID) throws ApiException {
        com.squareup.okhttp.Call call = getChannelMetricsCall(networkID, channelID, null, null);
        Type localVarReturnType = new TypeToken<ChannelStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * See basic channel stats (asynchronously)
     * Get a report on various channel metrics
     * @param networkID ID of the IBP network (required)
     * @param channelID Gathered metrics will pertain to this channel (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelMetricsAsync(String networkID, String channelID, final ApiCallback<ChannelStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelMetricsCall(networkID, channelID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelsFromPeers */
    private com.squareup.okhttp.Call getChannelsFromPeersCall(String networkID, PeerList body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'networkID' is set
        if (networkID == null) {
            throw new ApiException("Missing the required parameter 'networkID' when calling getChannelsFromPeers(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/networks/{networkID}/channels".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "networkID" + "\\}", apiClient.escapeString(networkID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List channels on peers
     * Retreives a list of channels from each of the peers given in the body of the request
     * @param networkID ID of the IBP network (required)
     * @param body Lists your peers that should be queried (optional)
     * @return CertificateList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateList getChannelsFromPeers(String networkID, PeerList body) throws ApiException {
        ApiResponse<CertificateList> resp = getChannelsFromPeersWithHttpInfo(networkID, body);
        return resp.getData();
    }

    /**
     * List channels on peers
     * Retreives a list of channels from each of the peers given in the body of the request
     * @param networkID ID of the IBP network (required)
     * @param body Lists your peers that should be queried (optional)
     * @return ApiResponse&lt;CertificateList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateList> getChannelsFromPeersWithHttpInfo(String networkID, PeerList body) throws ApiException {
        com.squareup.okhttp.Call call = getChannelsFromPeersCall(networkID, body, null, null);
        Type localVarReturnType = new TypeToken<CertificateList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List channels on peers (asynchronously)
     * Retreives a list of channels from each of the peers given in the body of the request
     * @param networkID ID of the IBP network (required)
     * @param body Lists your peers that should be queried (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelsFromPeersAsync(String networkID, PeerList body, final ApiCallback<CertificateList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelsFromPeersCall(networkID, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listChannelMembers */
    private com.squareup.okhttp.Call listChannelMembersCall(String networkID, String channelID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'networkID' is set
        if (networkID == null) {
            throw new ApiException("Missing the required parameter 'networkID' when calling listChannelMembers(Async)");
        }
        
        // verify the required parameter 'channelID' is set
        if (channelID == null) {
            throw new ApiException("Missing the required parameter 'channelID' when calling listChannelMembers(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/networks/{networkID}/channels/{channelID}/members".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "networkID" + "\\}", apiClient.escapeString(networkID.toString()))
        .replaceAll("\\{" + "channelID" + "\\}", apiClient.escapeString(channelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * See the channel members
     * Get a list of the members for a given channel
     * @param networkID ID of the IBP network (required)
     * @param channelID The list will include members of this channel (required)
     * @return List&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2001> listChannelMembers(String networkID, String channelID) throws ApiException {
        ApiResponse<List<InlineResponse2001>> resp = listChannelMembersWithHttpInfo(networkID, channelID);
        return resp.getData();
    }

    /**
     * See the channel members
     * Get a list of the members for a given channel
     * @param networkID ID of the IBP network (required)
     * @param channelID The list will include members of this channel (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2001>> listChannelMembersWithHttpInfo(String networkID, String channelID) throws ApiException {
        com.squareup.okhttp.Call call = listChannelMembersCall(networkID, channelID, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * See the channel members (asynchronously)
     * Get a list of the members for a given channel
     * @param networkID ID of the IBP network (required)
     * @param channelID The list will include members of this channel (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listChannelMembersAsync(String networkID, String channelID, final ApiCallback<List<InlineResponse2001>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listChannelMembersCall(networkID, channelID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listInstantiatedChaincodes */
    private com.squareup.okhttp.Call listInstantiatedChaincodesCall(String networkID, String channelID, StandardBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'networkID' is set
        if (networkID == null) {
            throw new ApiException("Missing the required parameter 'networkID' when calling listInstantiatedChaincodes(Async)");
        }
        
        // verify the required parameter 'channelID' is set
        if (channelID == null) {
            throw new ApiException("Missing the required parameter 'channelID' when calling listInstantiatedChaincodes(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/networks/{networkID}/channels/{channelID}/chaincode/instantiated".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "networkID" + "\\}", apiClient.escapeString(networkID.toString()))
        .replaceAll("\\{" + "channelID" + "\\}", apiClient.escapeString(channelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * See instantiated chaincodes
     * Get a list of the instantiated chaincodes for a given channel
     * @param networkID ID of the IBP network (required)
     * @param channelID Listed chaincodes will pertain to this channel (required)
     * @param body (Optional) Specify the specific name of peer(s) to query (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 listInstantiatedChaincodes(String networkID, String channelID, StandardBody body) throws ApiException {
        ApiResponse<InlineResponse200> resp = listInstantiatedChaincodesWithHttpInfo(networkID, channelID, body);
        return resp.getData();
    }

    /**
     * See instantiated chaincodes
     * Get a list of the instantiated chaincodes for a given channel
     * @param networkID ID of the IBP network (required)
     * @param channelID Listed chaincodes will pertain to this channel (required)
     * @param body (Optional) Specify the specific name of peer(s) to query (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> listInstantiatedChaincodesWithHttpInfo(String networkID, String channelID, StandardBody body) throws ApiException {
        com.squareup.okhttp.Call call = listInstantiatedChaincodesCall(networkID, channelID, body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * See instantiated chaincodes (asynchronously)
     * Get a list of the instantiated chaincodes for a given channel
     * @param networkID ID of the IBP network (required)
     * @param channelID Listed chaincodes will pertain to this channel (required)
     * @param body (Optional) Specify the specific name of peer(s) to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listInstantiatedChaincodesAsync(String networkID, String channelID, StandardBody body, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listInstantiatedChaincodesCall(networkID, channelID, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for syncChannelCerts */
    private com.squareup.okhttp.Call syncChannelCertsCall(String networkID, String channelID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'networkID' is set
        if (networkID == null) {
            throw new ApiException("Missing the required parameter 'networkID' when calling syncChannelCerts(Async)");
        }
        
        // verify the required parameter 'channelID' is set
        if (channelID == null) {
            throw new ApiException("Missing the required parameter 'channelID' when calling syncChannelCerts(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/networks/{networkID}/channels/{channelID}/sync".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "networkID" + "\\}", apiClient.escapeString(networkID.toString()))
        .replaceAll("\\{" + "channelID" + "\\}", apiClient.escapeString(channelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Sync channel certificates
     * Synchronizes the list of certificates for a given channel across a list of peers.  Useful for making sure all your peers can verify signatures for a given channel.
     * @param networkID ID of the IBP network (required)
     * @param channelID ID of the channel you want to sync (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 syncChannelCerts(String networkID, String channelID) throws ApiException {
        ApiResponse<InlineResponse2002> resp = syncChannelCertsWithHttpInfo(networkID, channelID);
        return resp.getData();
    }

    /**
     * Sync channel certificates
     * Synchronizes the list of certificates for a given channel across a list of peers.  Useful for making sure all your peers can verify signatures for a given channel.
     * @param networkID ID of the IBP network (required)
     * @param channelID ID of the channel you want to sync (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> syncChannelCertsWithHttpInfo(String networkID, String channelID) throws ApiException {
        com.squareup.okhttp.Call call = syncChannelCertsCall(networkID, channelID, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sync channel certificates (asynchronously)
     * Synchronizes the list of certificates for a given channel across a list of peers.  Useful for making sure all your peers can verify signatures for a given channel.
     * @param networkID ID of the IBP network (required)
     * @param channelID ID of the channel you want to sync (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncChannelCertsAsync(String networkID, String channelID, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncChannelCertsCall(networkID, channelID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
