/**
 * IBM Blockchain Platform Service API
 * The Blockchain Service API allows you to interact with your blockchain network.  The APIs listed in this doc are authenticated using basic auth, where the username and password correspond to a user org and secret that are included in your service credentials.  See the ConnectionProfile schema under the Models for more information.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * Enrollment credentials for the CA
 */
@ApiModel(description = "Enrollment credentials for the CA")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-28T22:08:33.832-05:00")
public class ConnectionProfileCertificateAuthoritiesFabriccaorgIDcaIDRegistrar   {
  @SerializedName("enrollId")
  private String enrollId = null;

  @SerializedName("enrollSecret")
  private String enrollSecret = null;

  public ConnectionProfileCertificateAuthoritiesFabriccaorgIDcaIDRegistrar enrollId(String enrollId) {
    this.enrollId = enrollId;
    return this;
  }

   /**
   * An enrollment ID that is registered on the CA
   * @return enrollId
  **/
  @ApiModelProperty(example = "null", value = "An enrollment ID that is registered on the CA")
  public String getEnrollId() {
    return enrollId;
  }

  public void setEnrollId(String enrollId) {
    this.enrollId = enrollId;
  }

  public ConnectionProfileCertificateAuthoritiesFabriccaorgIDcaIDRegistrar enrollSecret(String enrollSecret) {
    this.enrollSecret = enrollSecret;
    return this;
  }

   /**
   * The enrollment secret for the enrollment ID
   * @return enrollSecret
  **/
  @ApiModelProperty(example = "null", value = "The enrollment secret for the enrollment ID")
  public String getEnrollSecret() {
    return enrollSecret;
  }

  public void setEnrollSecret(String enrollSecret) {
    this.enrollSecret = enrollSecret;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionProfileCertificateAuthoritiesFabriccaorgIDcaIDRegistrar connectionProfileCertificateAuthoritiesFabriccaorgIDcaIDRegistrar = (ConnectionProfileCertificateAuthoritiesFabriccaorgIDcaIDRegistrar) o;
    return Objects.equals(this.enrollId, connectionProfileCertificateAuthoritiesFabriccaorgIDcaIDRegistrar.enrollId) &&
        Objects.equals(this.enrollSecret, connectionProfileCertificateAuthoritiesFabriccaorgIDcaIDRegistrar.enrollSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enrollId, enrollSecret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionProfileCertificateAuthoritiesFabriccaorgIDcaIDRegistrar {\n");
    
    sb.append("    enrollId: ").append(toIndentedString(enrollId)).append("\n");
    sb.append("    enrollSecret: ").append(toIndentedString(enrollSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

